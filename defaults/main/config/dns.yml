---
# yamllint disable rule:line-length
###############################################################################
# DNS (dns)
###############################################################################

# Upstream DNS servers.
#
# Values:
#   {IP}: Upstream DNS server IP.
#   {IP}#{PORT}: Upstream DNS server IP, port.
#   {HOSTNAME}: Upstream DNS hostname.
#
# pihole_cfg_dns_upstreams:
#   - '8.8.8.8'
#   - '127.0.0.1#5335'
#   - 'docker-resolver'
#
# Default: ['8.8.8.8', '4.4.4.4'].
pihole_cfg_dns_upstreams:
  - '8.8.8.8'
  - '4.4.4.4'

# Disable deep CNAME inspection?
#
# Might be beneficial for very low-end devices.
#
# Default: True.
pihole_cfg_dns_cname_deep_inspect: true

# Prevent SNI from being used to determine which websites users are visiting?
#
# Encrypted Server Name Indication (ESNI) is certainly a good step into the
# right direction to enhance privacy on the web. It prevents on-path observers,
# including ISPs, coffee shop owners and firewalls, from intercepting the TLS
# Server Name Indication (SNI) extension by encrypting it. This prevents the
# SNI from being used to determine which websites users are visiting.
#
# ESNI will obviously cause issues for pixelserv-tls which will be unable to
# generate matching certificates on-the-fly when it cannot read the SNI.
# Cloudflare and Firefox are already enabling ESNI. According to the IEFT draft
# (link above), we can easily restore piselserv-tls's operation by replying
# NXDOMAIN to _esni. subdomains of blocked domains as this mimics a "not
# configured for this domain" behavior.
#
# Reference:
# * https://datatracker.ietf.org/doc/html/draft-ietf-tls-esni
pihole_cfg_dns_block_esni: true

# Overwrite query source when EDNS0 client subnet (ECS) information provided?
#
# This allows PiHole to obtain client IPs even if they are hidden behind the
# NAT of a router. This feature has been requested and discussed on Discourse
# where further information how to use it can be found.
#
# Default: True.
#
# Reference:
# * https://discourse.pi-hole.net/t/support-for-add-subnet-option-from-dnsmasq-ecs-edns0-client-subnet/35940
pihole_cfg_dns_edns0_ecs: true

# Ignore queries made by localhost? Default: False.
pihole_cfg_dns_ignore_localhost: false

# Enable DNSSEC analysis and show internally generated queries? Default: True.
pihole_cfg_dns_show_dnssec: true

# Analyze only A and AAAA queries? Default: False.
pihole_cfg_dns_analyze_only_a_and_aaaa: false

# PTR local interface replies.
#
# Values:
#           NONE: PiHole will not respond automatically on PTR requests to
#                 local interface addresses. Ensure pi.hole and/or hostname
#                 records exist elsewhere.
#       HOSTNAME: Serve machine's hostname. Hostname is queried from kernel
#                 through uname->nodename. If machine has multiple network
#                 interfaces, it can also have multiple nodenames. In this
#                 case, it is unspecified and up to the kernel which one will
#                 be returned. On Linux, returned string is what has been set
#                 using sethostname - usually what is set in /etc/hostname.
#   HOSTNAMEFQDN: Serve the machine's hostname (see limitations above) as fully
#                 qualified domain by adding the local domain. If no local
#                 domain has been defined (config option dns.domain), FTL tries
#                 to query the domain name from the kernel using getdomainname.
#                 If this fails, FTL appends ".no_fqdn_available" to hostname.
#        PI.HOLE: Respond with "pi.hole" (default).
#
# Default: 'PI.HOLE'.
pihole_cfg_dns_pihole_ptr: 'PI.HOLE'

# DNS query response behavior when gravity database is not available.
#
# Values:
#    BLOCK: Block all queries when the database is busy.
#    ALLOW: Allow all queries when the database is busy (default).
#   REFUSE: Refuse all queries which arrive while the database is busy. Many
#           clients will just immediately retry, causing up to several
#           thousands of queries per second. This does not happen in DROP mode.
#     DROP: Drop queries. Never reply to them at all.
#
# Default: 'ALLOW'.
pihole_cfg_dns_reply_when_busy: 'ALLOW'

# Internal TTL for blocked queries (seconds).
#
# Allows users to select a value different from dnsmasq config option
# local-ttl. Useful in context of locally used hostnames that are known to stay
# constant over long times (printers, etc.). Note that large values may render
# whitelisting ineffective due to client-side caching of blocked queries.
#
# Default: 2.
pihole_cfg_dns_block_ttl: 2

# Custom DNS records.
#
# pihole_cfg_dns_hosts:
#     list of dict: HOSTS DNS records.
#   - ip: str - IP to resolve.
#     host: str - Hostname to resolve.
#
# pihole_cfg_dns_hosts:
#   - ip: '127.0.0.1'
#     host: 'mylocal'
#   - ip: '192.168.0.1'
#     host: 'therouter'
#
# Default: [] (disabled).
pihole_cfg_dns_hosts: []

# Require domain to forward A/AAAA queries to upstream servers? Default: False.
pihole_cfg_dns_domain_needed: false

# Enable append domain name to simple host names in /etc/hosts? Default: False.
pihole_cfg_dns_expand_hosts: false

# Local DNS domain.
#
# Never forwards any requests upstream unless pihole_cfg_dns_rev_servers set
# for this domain - when configured all queries for this domain are sent
# exclusively to this server (including reverse lookups).
#
# For DHCP, this has two effects:
# 1. It causes the DHCP server to return the domain to any hosts which request
#    it, and secondly it sets the domain which it is legal for DHCP-configured
#    hosts to claim. The intention is to constrain hostnames so that an
#    untrusted host on the LAN cannot advertise its name via DHCP as e.g.
#    "google.com" and capture traffic not meant for it.
# 2. If no domain suffix is specified then any DHCP hostname with a domain part
#    (ie with a period) will be disallowed and logged. If a domain is
#    specified, then hostnames with a domain part are allowed, provided the
#    domain part matches the suffix. In addition, when a suffix is set then
#    hostnames without a domain part have the suffix added as an optional
#    domain part. For instance, we can set pihole_cfg_dns_domain=mylab.com and
#    have a machine whose DHCP hostname is "laptop". The IP address for that
#    machine is available both as "laptop" and "laptop.mylab.com".
#
# Values:
#   {DOMAIN}: Any valid domain.
#         '': Disabled.
#
# Default: 'lan'.
pihole_cfg_dns_domain: 'lan'

# Reject reverse lookups for private IP ranges?
#
# Reverse lookups for private IP ranges not found in /etc/hosts or DHCP leases
# will be answered with 'no such domain' rather than being forwarded upstream.
#
# Default: True.
pihole_cfg_dns_bogus_priv: true

# Validate DNS replies using DNSSEC? Default: False.
pihole_cfg_dns_dnssec: false

# DNS/DHCP interface. Default: 'eth0'.
pihole_cfg_dns_interface: 'eth0'

# Add single host A/AAAA and PTR records to DNS?
#
# Add single host with one or more names to DNS with associated IPv4(A) and
# IPv6(AAAA) records.
#
# Deprecated: Migrate to pihole_cfg_dns_hosts - Legacy setting is kept for
#     older PiHole releases. Likely to be removed in the future.
#
# Special Case:
# * The hostname must map to another hostname, ipv4, or ipv6 address.
#
# pihole_cfg_dns_host_record:
#      dict - Custom host DNS record.
#    name: str or list of str - Hostname(s).
#    ipv4: str - IPv4 address to map to hostname(s). Optional.
#    ipv6: str - IPv6 address to map to hostnaes(s). Optional.
#    ttl: int - DNS hostname TTL (seconds). Optional.
#
# _pihole_cfg_dns_host_record:
#    name:
#      - 'sn'
#      - 'server-name'
#    ipv4: '172.16.0.253'
#    ipv6: '::ffff:172.16.0.253'
#    ttl: 86400
#
# Default: [] (disabled).
#
# Reference:
# * https://discourse.pi-hole.net/t/local-dns-records/74898
pihole_cfg_dns_host_record: {}

# PiHole interface listening mode.
#
# Values:
#    LOCAL: Allow only local requests. This setting accepts DNS queries only
#           from hosts whose address is on a local subnet, i.e., a subnet for
#           which an interface exists on the server. It is intended to be set
#           as a default on installation, to allow un-configured installations
#           to be useful but also safe from being used for DNS amplification
#           attacks if (accidentally) running public (default).
#   SINGLE: Permit all origins, accept only on specified interface. Respond
#           only to queries arriving on specified interface. Loopback (lo)
#           interface is automatically added to list of interfaces to use when
#           this option is used. Make sure your PiHole is properly firewalled!
#     BIND: By default, FTL binds wildcard address. If this is not what you
#           want, you can use this option as it forces FTL to really bind only
#           interfaces it is listening on. Note that this may result in issues
#           when interface may go down (cable unplugged, etc.). About the only
#           time when this is useful is when running another nameserver on the
#           same port on the same machine. This may also happen if you run a
#           virtualization API such as libvirt. When this option is used, IP
#           alias interface labels (e.g. enp2s0:0) are checked rather than
#           interface names.
#      ALL: Permit all origins, accept on all interfaces. Make sure your PiHole
#           is properly firewalled! This truly allows any traffic to be replied
#           to and is a dangerous thing to do as your PiHole could become an
#           open resolver. You should always ask yourself if the first option
#           doesn't work for you as well.
#     NONE: Do not add any configuration concerning the listening mode to
#           dnsmasq configuration file. This is useful if you want to manually
#           configure the listening mode in auxiliary configuration files. This
#           option is really meant for advanced users only, support for this
#           option may be limited.
#
# Default: 'LOCAL'.
pihole_cfg_dns_listening_mode: 'LOCAL'

# Enable DNS query logging? Default: True.
pihole_cfg_dns_query_logging: true

# List of CNAME records which indicate that <cname> is really <target>.
#
# pihole_cfg_dns_cname_records:
#     list of dict - CNAME records.
#   - cname: str - CNAME.
#     target: str - target CNAME.
#     ttl: int - TTL in seconds.
#         Default: '' (use local-ttl).
#
# pihole_cfg_dns_cname_records:
#   - cname: 'friendly-name'
#     target: 'host'
#     ttl: 86400
#   - cname: 'friendly-alt-name'
#     target: 'host'
#
# Default: [] (disabled).
pihole_cfg_dns_cname_records: []

# DNS server port. Default: 53.
pihole_cfg_dns_port: 53

# Reverse servers.

# pihole_cfg_dns_rev_servers:
#     list of dict - Reverse server definition.
#   - enabled: bool - Enable reverse server.
#     ip: str - CIDR range for reverse server.
#         Special Case:
#         * If prefix length omitted, either 32 (IPv4) or 128 (IPv6) are used.
#           This is almost certainly not what you want.
#         Values:
#           {CIDR}: CIDR address range.
#     server: str - Target server to use for reverse server.
#         Values:
#                  {IP}: Target server IP.
#           {IP}#{PORT}: Target server IP, port.
#     domain: str - Domain used for reverse server.
#
# pihole_cfg_dns_rev_servers:
#   - enabled: true
#     ip: '192.168.0.0/24'
#     server: '192.168.0.1'
#     domain: 'example.com'
#   - enabled: true
#     ip: '10.0.0.0/8'
#     server: '10.10.10.10#553'
#     domain: 'example2.com'
#
# Default: [] (disabled).
pihole_cfg_dns_rev_servers: []

###############################################################################
# DNS Caching (dns.cache)
###############################################################################

# DNS server cache size.
#
# Note that expiring cache entries naturally make room for new insertions over
# time. Setting this number too high will have an adverse effect as not only
# more space is needed, but also lookup speed gets degraded in 10,000+ range.
# dnsmasq may issue a warning when you go beyond 10,000+ cache entries.
#
# Default: 10000.
pihole_cfg_dns_size: 10000

# Query cache optimizer (seconds).
#
# If a DNS name exists in the cache, but its time-to-live has expired only
# recently, data will be used anyway (a refreshing from upstream is triggered).
#
# This can improve DNS query delays especially over unreliable Internet
# connections. This feature comes at the expense of possibly sometimes
# returning out-of-date data and less efficient cache utilization, since old
# data cannot be flushed when its TTL expires, so the cache becomes mostly
# least-recently-used.
#
# Values:
#      -1: Disable.
#       0: Serve stale cache data regardless of how long it has expired. Not
#          recommended as it may lead to stale data being served for a long
#          time.
#   86400: Strongly recommend staying below 1 day (86400) to mitigate issues
#          caused by massively outdated DNS replies.
#
# Default: 3600 (1 hour).
pihole_cfg_dns_optimizer: 3600

# Blocked query TTL (seconds).
#
# Once TTL expires, the query will be forwarded to upstream server again to
# check if the block is still valid.
#
# Values:
#       0: Disable.
#   86400: Block for 1 day (default).
#
# Default: 86400 (1 day).
pihole_cfg_dns_upstream_blocked_ttl: 86400

###############################################################################
# DNS Blocking (dns.blocking)
###############################################################################

# Block DNS queries? Default: True.
pihole_cfg_dns_active: true

# Blocked DNS query response.
#
# Values:
#             NULL: Recommended mode for PiHole FTLDNS, blocked queries will be
#                   answered with 'unspecified address' 0.0.0.0 or ::). The
#                   'unspecified address' is a reserved IP address specified by
#                   RFC 3513 - Internet Protocol Version 6 (IPv6) Addressing
#                   Architecture, section 2.5.2 (default).
#   IP_NODATA_AAAA: Answer with local IPv4 addresses of PiHole. Blocked AAAA
#                   queries will be answered with NODATA-IPV6 and clients will
#                   only try to reach your PiHole over its static IPv4 address.
#               IP: Answer with local IP addresses of your PiHole.
#               NX: Answer with an empty response (i.e., there won't be an
#                   answer section) and status NXDOMAIN. A NXDOMAIN response
#                   should indicate that there is no such domain to client
#                   making the query.
#           NODATA: Answer with an empty response (no answer section) and
#                   status NODATA. A NODATA response indicates that the domain
#                   exists, but there is no record for requested query type.
#
# Default: 'NULL'.
pihole_cfg_dns_mode: 'NULL'

# Add EDNS0 information to blocked DNS replies?
#
# Values:
#   NONE: No additional EDNS information is added to blocked queries.
#   CODE: Add EDNS info-code BLOCKED (15).
#   TEXT: Add EDNS info-code BLOCKED (15) and a text message describing reason
#         for block (default).
#
# Default: 'TEXT'.
pihole_cfg_dns_edns: 'TEXT'

###############################################################################
# DNS Special Domains (dns.specialDomains)
###############################################################################

# Disable Firefox automatic DNS-over-HTTP?
#
# Always reply with NXDOMAIN to A and AAAA queries of use-application-dns.net
# to disable Firefox automatic DNS-over-HTTP.
#
# Default: True.
#
# Reference:
# * https://support.mozilla.org/en-US/kb/configuring-networks-disable-dns-over-https
pihole_cfg_dns_mozilla_canary: true

# Prevent Apple devices from bypassing PiHole?
#
# Always reply with NXDOMAIN to A and AAAA queries of mask.icloud.com and
# mask-h2.icloud.com to disable Apple's iCloud Private Relay.
#
# Reference:
# * https://developer.apple.com/support/prepare-your-network-for-icloud-private-relay
pihole_cfg_dns_icloud_private_relay: true

# Prevent devices bypassing PiHole using Discovery of Designated Resolvers?
#
# Always reply with NODATA to all queries to zone resolver.arpa.
#
# Default: True.
#
# Reference:
# * https://datatracker.ietf.org/doc/html/rfc9462
pihole_cfg_dns_designated_resolver: true

###############################################################################
# DNS Reply Host (dns.reply.host)
###############################################################################

# Enable specific IPv4 address for PiHole host?
#
# Requires pihole_cfg_dns_host_ipv4 set.
#
# Use fixed - rather than dynamically obtained - address when PiHole responds
# to following names:
# * pi.hole
# * <the device's hostname>
# * pi.hole.<local domain>
# * <the device's hostname>.<local domain>
#
# Default: False.
pihole_cfg_dns_host_force4: false

# IPv4 address for PiHole host responses.
#
# Requires pihole_cfg_dns_host_force4=true.
#
# Default: ''.
pihole_cfg_dns_host_ipv4: ''

# Enable specific IPv6 address for PiHole host?
#
# Requires pihole_cfg_dns_host_ipv6 set.
#
# Use fixed - rather than dynamically obtained - address when PiHole responds
# to following names:
# * pi.hole
# * <the device's hostname>
# * pi.hole.<local domain>
# * <the device's hostname>.<local domain>
#
# Default: False.
pihole_cfg_dns_host_force6: false

# IPv6 address for PiHole host responses.
#
# Requires pihole_cfg_dns_host_force6=true.
#
# Default: ''.
pihole_cfg_dns_host_ipv6: ''

###############################################################################
# DNS Reply Blocking (dns.reply.blocking)
###############################################################################

# Enable specific IPv4 address in IP blocking mode?
#
# Requires pihole_cfg_dns_blocking_ipv4 set.
#
# Use fixed - rather than dynamically obtained - address when PiHole responds
# in following cases:
# * IP blocking mode is used and this query is to be blocked.
# * Regular expressions with the ;reply=IP regex extension.
#
# Default: False.
pihole_cfg_dns_blocking_force4: false

# IPv4 address for IP blocking mode.
#
# Requires pihole_cfg_dns_blocking_force4=true.
#
# Default: ''.
pihole_cfg_dns_blocking_ipv4: ''

# Enable specific IPv6 address in IP blocking mode?
#
# Requires pihole_cfg_dns_blocking_ipv6 set.
#
# Use fixed - rather than dynamically obtained - address when PiHole responds
# in following cases:
# * IP blocking mode is used and this query is to be blocked.
# * Regular expressions with the ;reply=IP regex extension.
#
# Default: False.
pihole_cfg_dns_blocking_force6: false

# IPv6 address for IP blocking mode.
#
# Requires pihole_cfg_dns_blocking_force6=true.
#
# Default: ''.
pihole_cfg_dns_blocking_ipv6: ''

###############################################################################
# DNS Rate Limit (dns.rateLimit)
###############################################################################
# Rate-limited queries are answered with a REFUSED reply and not further
# processed by FTL.
#
# The default settings for FTL's rate-limiting are to permit no more than 1000
# queries in 60 seconds. Both numbers can be customized independently. It is
# important to note that rate-limiting is happening on a per-client basis.
# Other clients can continue to use FTL while rate-limited clients are
# short-circuited at the same time.
#
# Time interval is relative to when FTL has finished starting (start of daemon
# + possible delay by DELAY_STARTUP) then it will advance in steps of
# rate-limiting interval. If a client reaches the maximum number of queries it
# will be blocked until the end of current interval and logged to
# /var/log/pihole/FTL.log.
#
# If client continues to send queries while being blocked already and this
# number of queries during blocking exceeds limit; the client will continue to
# be blocked until the end of the next interval (FTL.log will contain lines
# like Still rate-limiting X.X.X.X as it made additional 5007 queries). As
# soon as client requests less than set limit, it will be unblocked (ending
# rate-limitation).
#
# Examples:
# * 1 query per hour: pihole_cfg_dns_count=1, pihole_cfg_dns_interval=3600.
#
# Special Case:
# * Setting both values to zero results in same behavior as in FTL v5.7.

# Rate limit count. Default: 1000.
pihole_cfg_dns_count: 1000

# Rate limit interval. Default: 60.
pihole_cfg_dns_interval: 60
